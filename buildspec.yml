version: 0.2

env:
  variables:
    IMAGE_REPO_NAME: "learn-codepipeline"     # <-- your ECR repo name
    CONTAINER_NAME: "app"              # <-- must match container name in ECS task def
  compute-type: BUILD_GENERAL1_SMALL

phases:
  pre_build:
    commands:
      - echo "Compute AWS info & login to ECR"
      - aws --version
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - REGION=$(aws configure get region)
      - REPO_URI=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${IMAGE_REPO_NAME}
      # Derive an image tag from the commit SHA (fallback to build id)
      - COMMIT_SHA=${CODEBUILD_RESOLVED_SOURCE_VERSION:-none}
      - IMAGE_TAG=${COMMIT_SHA:0:7}-${CODEBUILD_BUILD_NUMBER}
      - echo "ECR repo: $REPO_URI  | tag: $IMAGE_TAG"
      - aws ecr get-login-password --region ${REGION} \
          | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com

  build:
    commands:
      - echo "Docker build"
      - docker build -t ${REPO_URI}:${IMAGE_TAG} .
      # Optional: also tag as 'latest'
      - docker tag ${REPO_URI}:${IMAGE_TAG} ${REPO_URI}:latest

  post_build:
    commands:
      - echo "Push image to ECR"
      - docker push ${REPO_URI}:${IMAGE_TAG}
      - docker push ${REPO_URI}:latest
      - echo "Generate imagedefinitions.json for ECS deploy"
      - printf '[{"name":"%s","imageUri":"%s"}]' "${CONTAINER_NAME}" "${REPO_URI}:${IMAGE_TAG}" > imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
